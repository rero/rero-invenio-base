[project]
name = "rero-invenio-base"
version = "0.3.2"
description = "Generic backend libraries for RERO Invenio instances."
readme = "README.rst"
authors = [{name = "RERO",email = "software@rero.ch"}]
license = "AGPL-3.0"
requires-python = ">=3.9, <3.13"

dependencies = [
    "PyYAML (<=7.0)",
    "jsonpatch (<=2.0)",
    "Mako (>=1.2.2)",
    "dparse (>=0.5.2)",
    "invenio-search [elasticsearch7] (>=2.1.0)",
    "invenio-db [postgresql] (>=1.1.0)",
    "invenio-indexer (>=2.2.0)",
    "invenio-records-rest (>=2.2.0)",
    "sqlalchemy (>=1.3.0)",
    "poethepoet>=0.36.0",
]

[dependency-groups]
dev = [
    "pytest-invenio>=2.1.6",
    "Sphinx>4.5.0",
    "pip-audit>=2.8.0",
    "docker-services-cli<=1.0.0",
    "appnope",
    "ruff>=0.12.3",
]

[tool.project.entry-points]
check_license = "rero_invenio_base.cli.utils:check_license"
check_json = "rero_invenio_base.cli.utils:check_json"
rero = "rero_invenio_base.cli:rero"

[project.entry-points."flask.commands"]
rero = "rero_invenio_base.cli:rero"

[project.entry-points."invenio_base.apps"]
rero-invenio-base-export = "rero_invenio_base.modules.export.ext:ReroInvenioBaseExportApp"

[project.entry-points."invenio_base.api_blueprints"]
rero_ils_exports = "rero_invenio_base.modules.export.views:create_blueprint_from_app"

[project.entry-points."invenio_celery.tasks"]
rero = "rero_invenio_base.modules.tasks"

[tool.pytest.ini_options]
addopts = "--color=yes --exclude-warning-annotations --doctest-glob=\"*.rst\" --doctest-modules --cov=rero_invenio_base --cov-report=term-missing --ignore=docs/conf.py"
testpaths = "docs tests rero_invenio_base"
# not displaying all the PendingDeprecationWarnings from invenio
filterwarnings = "ignore::PendingDeprecationWarning"

[tool.ruff]
extend-exclude = ["config.py", "./docs/conf.py"]
line-length = 120

[tool.ruff.lint]
extend-select = ["A", "C4", "DTZ", "INT", "ISC", "T20", "PIE", "Q", "RET", "SIM", "I", "N", "PERF", "W", "D", "F", "UP", "RUF"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.poe.tasks]
format =  {cmd = "ruff format .", help = "Formats all files"}
lint = {cmd = "ruff check", help = "Checks linting"}
run_tests = {cmd = "./scripts/test", help = "Runs all tests"}

[build-system]
requires = ["setuptools"]

[tool.setuptools.packages.find]
where = ["."]

[tool.uv]
package = true
